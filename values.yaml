# Default values for nifi-registry

## Image configuration
image:
  repository: apache/nifi-registry
  tag: ""
  pullPolicy: IfNotPresent

## StatefulSet configuration
replicaCount: 1

## Service configuration
service:
  type: ClusterIP
  port: 18443
  annotations: {}

## Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: nifi-registry.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Service Account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Resource configuration
resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

## Persistence configuration
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 8Gi

## Security configuration with keystore/truststore
security:
  # Enable SSL/TLS
  enabled: true
  
  # Certificate management
  certificates:
    # Strategy: auto, cert-manager, or manual
    # auto: Generate self-signed certificates automatically
    # cert-manager: Use cert-manager to generate certificates
    # manual: Use manually provided certificates
    strategy: auto
    # For cert-manager strategy
    certManager:
      issuerRef:
        name: selfsigned-issuer
        kind: ClusterIssuer
    # For manual strategy
    manual:
      keystoreSecret: ""
      truststoreSecret: ""
  
  # Keystore configuration
  keystore:
    type: JKS
    keystoreKey: keystore.jks
    password: changeit
  
  # Truststore configuration  
  truststore:
    type: JKS
    truststoreKey: truststore.jks
    password: changeit

## NiFi Registry configuration
nifiRegistry:
  # Web properties
  web:
    httpPort: ""
    httpsPort: 18443
    
  # JVM settings
  jvm:
    heapSize: "1g"
    
  # Custom properties to add to nifi-registry.properties
  properties: {}
    # Example:
    # nifi.registry.db.url: "jdbc:h2:./database/nifi-registry-primary"
    # nifi.registry.db.class: "org.h2.Driver"

## Pod configuration
podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 1000

## Node selection
nodeSelector: {}
tolerations: []
affinity: {}

## OIDC Authentication
oidc:
  enabled: true
  # OIDC Provider configuration
  discoveryUrl: ""  # Must be provided for production use
  clientId: "nifi-registry"
  clientSecret: ""  # Must be provided for production use
  
  # Additional OIDC configuration
  connectTimeout: "5 secs"
  readTimeout: "5 secs"
  preferredJwsAlgorithm: ""
  additionalScopes: ""
  claimIdentifyingUser: "email"
  fallbackClaimsIdentifyingUser: "sub"

## Database configuration
database:
  # Type: h2, postgresql, mysql
  type: h2
  
  # H2 configuration (default)
  h2:
    # For embedded H2, no additional configuration needed
    
  # PostgreSQL configuration
  postgresql:
    host: "localhost"
    port: 5432
    database: "nifi_registry"
    username: "nifi_user"
    password: "nifi_password"
    maxConnections: 10
    
  # MySQL configuration
  mysql:
    host: "localhost"
    port: 3306
    database: "nifi_registry"
    username: "nifi_user" 
    password: "nifi_password"
    maxConnections: 10

## Environment variables for runtime configuration
environment:
  # These will be used by the startup script to configure NiFi Registry
  # Database environment variables will be set based on database.type
  NIFI_REGISTRY_WEB_HTTPS_HOST: ""
  NIFI_REGISTRY_WEB_HTTPS_PORT: "18443"